<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Display Version Information</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">

</head>

<BODY>
<P><FONT face=Verdana size=2>For <FONT face=Courier color=#800000>catool</FONT> 
application, when user provides the <FONT face=Courier 
color=#800000>/version</FONT> or <FONT face=Courier color=#800000>/ver</FONT> 
option, the program should print out the version information on the screen. Now 
let's see how we can implement such requirement by using ACF.</FONT></P>
<OL>
  <LI><FONT face=Verdana size=2>In the <STRONG>Solution Explorer</STRONG>, right 
  click <FONT face=Courier color=#800000>catool</FONT> solution and select 
  <STRONG>Add | New Project</STRONG>, this brings up the <STRONG>Add New 
  Project</STRONG> dialog</FONT> 
  <LI><FONT face=Verdana size=2>In the <STRONG>Add New Project</STRONG> dialog, 
  select <STRONG>Visual C# | Class Library</STRONG>, and give it the name <FONT 
  face=Courier color=#800000>Catool.Contracts<FONT face=Verdana color=#000000>, 
  then click <STRONG>OK</STRONG></FONT></FONT><BR><IMG alt="" src="images/catool_create_contracts_prj.png"></FONT> 
  <LI><FONT face=Verdana size=2>Use the same way as we mentioned in <A href="Create the application provider.htm">Create the Application 
  Provider</A> chapter to add the AdaptiveConsole.dll as 
  a&nbsp;reference&nbsp;to the project</FONT> 
  <LI><FONT face=Verdana size=2>Rename the <FONT face=Courier 
  color=#800000>Class1.cs</FONT> to <FONT face=Courier 
  color=#800000>DisplayVersionContract.cs</FONT> in <STRONG>Solution 
  Explorer</STRONG>, in the coming confirm dialog, click <STRONG>OK</STRONG> to 
  accept change</FONT> 
  <LI><FONT face=Verdana size=2>Make the <FONT face=Courier 
  color=#800000>DisplayVersionContract</FONT> class inherits from the <FONT 
  face=Courier color=#800000>OptionContractBase</FONT> class, and apply the 
  <FONT face=Courier color=#800000>OptionContract</FONT> attribute on the 
  class.&nbsp;After doing these changes, the class&nbsp;looks like the 
  following:<BR>
  <TABLE style="BORDER-COLLAPSE: collapse" borderColor=#000000 cellSpacing=0 
  cellPadding=2 width="90%" border=1>
    <TBODY>
    <TR>
      <TD>
        <DIV 
        style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Courier New">
        <P style="MARGIN: 0px">[</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: #2b91af">OptionContract</SPAN>(</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        Argument=<SPAN style="COLOR: #a31515">"/version;/ver"</SPAN>,</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        Description=<SPAN style="COLOR: #a31515">"Display the version 
        information"</SPAN>,</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Type=<SPAN 
        style="COLOR: #2b91af">ContractType</SPAN>.Exact)</P>
        <P style="MARGIN: 0px">]</P>
        <P style="MARGIN: 0px"><SPAN style="COLOR: blue">public</SPAN> <SPAN 
        style="COLOR: blue">class</SPAN> <SPAN 
        style="COLOR: #2b91af">DisplayVersionContract</SPAN> : <SPAN 
        style="COLOR: #2b91af">OptionContractBase</SPAN></P>
        <P style="MARGIN: 0px">{</P>
        <P 
  style="MARGIN: 0px">}</P></DIV><!--EndFragment--></TD></TR></TBODY></TABLE><BR></FONT>
  <LI><FONT face=Verdana size=2>Override the <FONT face=Courier 
  color=#800000>Execute</FONT> method of the base class, and implement it like 
  this:<BR>
  <TABLE style="BORDER-COLLAPSE: collapse" borderColor=#000000 cellSpacing=0 
  cellPadding=2 width="90%" border=1>
    <TBODY>
    <TR>
      <TD>
        <DIV 
        style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Courier New"><SPAN 
        style="COLOR: blue">
        <DIV 
        style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Courier New">
        <P style="MARGIN: 0px"><SPAN style="COLOR: blue">public</SPAN> <SPAN 
        style="COLOR: blue">override</SPAN> <SPAN 
        style="COLOR: blue">void</SPAN> Execute(</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: #2b91af">ConsoleApplicationBase</SPAN> 
        consoleApplication,</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: #2b91af">IList</SPAN>&lt;<SPAN 
        style="COLOR: #2b91af">ArgumentInfo</SPAN>&gt; args)</P>
        <P style="MARGIN: 0px">{</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: #2b91af">Console</SPAN>.WriteLine(<SPAN 
        style="COLOR: #2b91af">Assembly</SPAN></P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        .GetEntryAssembly()</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        .GetName()</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
.Version</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        .ToString());</P>
        <P style="MARGIN: 0px">}</P></DIV><!--EndFragment--></SPAN><!--EndFragment--></DIV></TD></TR></TBODY></TABLE><BR>The 
  contract will display&nbsp;the version information that&nbsp;has been&nbsp;set 
  as an assembly property on the entry assembly.<BR></FONT>&nbsp; 
  <LI><FONT face=Verdana size=2>After finishing the steps above, the <FONT 
  face=Courier color=#800000>DisplayVersionContract</FONT> class should look 
  like this:<BR>
  <TABLE style="BORDER-COLLAPSE: collapse" borderColor=#000000 cellSpacing=0 
  cellPadding=2 width="90%" border=1>
    <TBODY>
    <TR>
      <TD>
        <DIV 
        style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Courier New">
        <P style="MARGIN: 0px"><SPAN style="COLOR: blue">using</SPAN> 
System;</P>
        <P style="MARGIN: 0px"><SPAN style="COLOR: blue">using</SPAN> 
        System.Collections.Generic;</P>
        <P style="MARGIN: 0px"><SPAN style="COLOR: blue">using</SPAN> 
        System.Reflection;</P>
        <P style="MARGIN: 0px"><SPAN style="COLOR: blue">using</SPAN> 
        AdaptiveConsole;</P>
        <P style="MARGIN: 0px">&nbsp;</P>
        <P style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> 
        Catool.Contracts</P>
        <P style="MARGIN: 0px">{</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; [</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: #2b91af">OptionContract</SPAN>(</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; Argument=<SPAN 
        style="COLOR: #a31515">"/version;/ver"</SPAN>,</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; Description=<SPAN style="COLOR: #a31515">"Display the 
        version information"</SPAN>,</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; Type=<SPAN 
        style="COLOR: #2b91af">ContractType</SPAN>.Exact)</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; ]</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> 
        <SPAN style="COLOR: #2b91af">DisplayVersionContract</SPAN> : <SPAN 
        style="COLOR: #2b91af">OptionContractBase</SPAN></P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: blue">public</SPAN> <SPAN 
        style="COLOR: blue">override</SPAN> <SPAN 
        style="COLOR: blue">void</SPAN> Execute(</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: #2b91af">ConsoleApplicationBase</SPAN> consoleApplication, 
        </P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: #2b91af">IList</SPAN>&lt;<SPAN 
        style="COLOR: #2b91af">ArgumentInfo</SPAN>&gt; args)</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; <SPAN 
        style="COLOR: #2b91af">Console</SPAN>.WriteLine(<SPAN 
        style="COLOR: #2b91af">Assembly</SPAN></P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .GetEntryAssembly()</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .GetName()</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Version</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .ToString());</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
        <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P>
        <P 
  style="MARGIN: 0px">}</P></DIV><!--EndFragment--></TD></TR></TBODY></TABLE></FONT></LI></OL>
<P><FONT face=Verdana size=2>We have implemented the functionality of displaying 
version information just within 7 steps. After following the steps in the next 
chapters, you can image how easy it is to build a console application with ACF. 
You don't need to write a single character in your code to parse the command 
line arguments.</FONT></P></BODY>
</html>
